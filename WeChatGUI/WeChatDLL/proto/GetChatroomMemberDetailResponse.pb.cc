// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetChatroomMemberDetailResponse.proto

#include "GetChatroomMemberDetailResponse.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chatroomid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baseresponse_)*/nullptr
  , /*decltype(_impl_.chatroomdata_)*/nullptr
  , /*decltype(_impl_.serverversion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetChatroomMemberDetailResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetChatroomMemberDetailResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetChatroomMemberDetailResponseDefaultTypeInternal() {}
  union {
    GetChatroomMemberDetailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetChatroomMemberDetailResponseDefaultTypeInternal _GetChatroomMemberDetailResponse_default_instance_;

// ===================================================================

class GetChatroomMemberDetailResponse::_Internal {
 public:
  static const ::BaseResponse& baseresponse(const GetChatroomMemberDetailResponse* msg);
  static const ::ChatRoomMemberData& chatroomdata(const GetChatroomMemberDetailResponse* msg);
};

const ::BaseResponse&
GetChatroomMemberDetailResponse::_Internal::baseresponse(const GetChatroomMemberDetailResponse* msg) {
  return *msg->_impl_.baseresponse_;
}
const ::ChatRoomMemberData&
GetChatroomMemberDetailResponse::_Internal::chatroomdata(const GetChatroomMemberDetailResponse* msg) {
  return *msg->_impl_.chatroomdata_;
}
void GetChatroomMemberDetailResponse::clear_baseresponse() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseresponse_ != nullptr) {
    delete _impl_.baseresponse_;
  }
  _impl_.baseresponse_ = nullptr;
}
void GetChatroomMemberDetailResponse::clear_chatroomdata() {
  if (GetArenaForAllocation() == nullptr && _impl_.chatroomdata_ != nullptr) {
    delete _impl_.chatroomdata_;
  }
  _impl_.chatroomdata_ = nullptr;
}
GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetChatroomMemberDetailResponse)
}
GetChatroomMemberDetailResponse::GetChatroomMemberDetailResponse(const GetChatroomMemberDetailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetChatroomMemberDetailResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chatroomid_){}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.chatroomdata_){nullptr}
    , decltype(_impl_.serverversion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.chatroomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatroomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chatroomid().empty()) {
    _this->_impl_.chatroomid_.Set(from._internal_chatroomid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_baseresponse()) {
    _this->_impl_.baseresponse_ = new ::BaseResponse(*from._impl_.baseresponse_);
  }
  if (from._internal_has_chatroomdata()) {
    _this->_impl_.chatroomdata_ = new ::ChatRoomMemberData(*from._impl_.chatroomdata_);
  }
  _this->_impl_.serverversion_ = from._impl_.serverversion_;
  // @@protoc_insertion_point(copy_constructor:GetChatroomMemberDetailResponse)
}

inline void GetChatroomMemberDetailResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chatroomid_){}
    , decltype(_impl_.baseresponse_){nullptr}
    , decltype(_impl_.chatroomdata_){nullptr}
    , decltype(_impl_.serverversion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chatroomid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chatroomid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChatroomMemberDetailResponse::~GetChatroomMemberDetailResponse() {
  // @@protoc_insertion_point(destructor:GetChatroomMemberDetailResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetChatroomMemberDetailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chatroomid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.baseresponse_;
  if (this != internal_default_instance()) delete _impl_.chatroomdata_;
}

void GetChatroomMemberDetailResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetChatroomMemberDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetChatroomMemberDetailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chatroomid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.baseresponse_ != nullptr) {
    delete _impl_.baseresponse_;
  }
  _impl_.baseresponse_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chatroomdata_ != nullptr) {
    delete _impl_.chatroomdata_;
  }
  _impl_.chatroomdata_ = nullptr;
  _impl_.serverversion_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* GetChatroomMemberDetailResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .BaseResponse baseResponse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseresponse(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chatroomID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chatroomid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 serverVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.serverversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ChatRoomMemberData chatroomData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chatroomdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChatroomMemberDetailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetChatroomMemberDetailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .BaseResponse baseResponse = 1;
  if (this->_internal_has_baseresponse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseresponse(this),
        _Internal::baseresponse(this).GetCachedSize(), target, stream);
  }

  // string chatroomID = 2;
  if (!this->_internal_chatroomid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatroomid().data(), static_cast<int>(this->_internal_chatroomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetChatroomMemberDetailResponse.chatroomID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chatroomid(), target);
  }

  // int32 serverVersion = 3;
  if (this->_internal_serverversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_serverversion(), target);
  }

  // .ChatRoomMemberData chatroomData = 4;
  if (this->_internal_has_chatroomdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::chatroomdata(this),
        _Internal::chatroomdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetChatroomMemberDetailResponse)
  return target;
}

size_t GetChatroomMemberDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetChatroomMemberDetailResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chatroomID = 2;
  if (!this->_internal_chatroomid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatroomid());
  }

  // .BaseResponse baseResponse = 1;
  if (this->_internal_has_baseresponse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseresponse_);
  }

  // .ChatRoomMemberData chatroomData = 4;
  if (this->_internal_has_chatroomdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chatroomdata_);
  }

  // int32 serverVersion = 3;
  if (this->_internal_serverversion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverversion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChatroomMemberDetailResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetChatroomMemberDetailResponse*>(
      &from));
}

void GetChatroomMemberDetailResponse::MergeFrom(const GetChatroomMemberDetailResponse& from) {
  GetChatroomMemberDetailResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:GetChatroomMemberDetailResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chatroomid().empty()) {
    _this->_internal_set_chatroomid(from._internal_chatroomid());
  }
  if (from._internal_has_baseresponse()) {
    _this->_internal_mutable_baseresponse()->::BaseResponse::MergeFrom(
        from._internal_baseresponse());
  }
  if (from._internal_has_chatroomdata()) {
    _this->_internal_mutable_chatroomdata()->::ChatRoomMemberData::MergeFrom(
        from._internal_chatroomdata());
  }
  if (from._internal_serverversion() != 0) {
    _this->_internal_set_serverversion(from._internal_serverversion());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetChatroomMemberDetailResponse::CopyFrom(const GetChatroomMemberDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetChatroomMemberDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChatroomMemberDetailResponse::IsInitialized() const {
  return true;
}

void GetChatroomMemberDetailResponse::InternalSwap(GetChatroomMemberDetailResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chatroomid_, lhs_arena,
      &other->_impl_.chatroomid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetChatroomMemberDetailResponse, _impl_.serverversion_)
      + sizeof(GetChatroomMemberDetailResponse::_impl_.serverversion_)
      - PROTOBUF_FIELD_OFFSET(GetChatroomMemberDetailResponse, _impl_.baseresponse_)>(
          reinterpret_cast<char*>(&_impl_.baseresponse_),
          reinterpret_cast<char*>(&other->_impl_.baseresponse_));
}

std::string GetChatroomMemberDetailResponse::GetTypeName() const {
  return "GetChatroomMemberDetailResponse";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GetChatroomMemberDetailResponse*
Arena::CreateMaybeMessage< ::GetChatroomMemberDetailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetChatroomMemberDetailResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
