// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoomMemberInfo.proto

#include "ChatRoomMemberInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR ChatRoomMemberInfo::ChatRoomMemberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.userwxid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.displayname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bigheadimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.smallheadimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inviteuserwxid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ischatroomnumber_)*/0
  , /*decltype(_impl_.field_8_)*/0
  , /*decltype(_impl_.field_16_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatRoomMemberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatRoomMemberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatRoomMemberInfoDefaultTypeInternal() {}
  union {
    ChatRoomMemberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;

// ===================================================================

class ChatRoomMemberInfo::_Internal {
 public:
};

ChatRoomMemberInfo::ChatRoomMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChatRoomMemberInfo)
}
ChatRoomMemberInfo::ChatRoomMemberInfo(const ChatRoomMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChatRoomMemberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.userwxid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.bigheadimgurl_){}
    , decltype(_impl_.smallheadimgurl_){}
    , decltype(_impl_.inviteuserwxid_){}
    , decltype(_impl_.ischatroomnumber_){}
    , decltype(_impl_.field_8_){}
    , decltype(_impl_.field_16_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.userwxid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userwxid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_userwxid().empty()) {
    _this->_impl_.userwxid_.Set(from._internal_userwxid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_displayname().empty()) {
    _this->_impl_.displayname_.Set(from._internal_displayname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bigheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bigheadimgurl().empty()) {
    _this->_impl_.bigheadimgurl_.Set(from._internal_bigheadimgurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.smallheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smallheadimgurl().empty()) {
    _this->_impl_.smallheadimgurl_.Set(from._internal_smallheadimgurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.inviteuserwxid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inviteuserwxid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inviteuserwxid().empty()) {
    _this->_impl_.inviteuserwxid_.Set(from._internal_inviteuserwxid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ischatroomnumber_, &from._impl_.ischatroomnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.field_16_) -
    reinterpret_cast<char*>(&_impl_.ischatroomnumber_)) + sizeof(_impl_.field_16_));
  // @@protoc_insertion_point(copy_constructor:ChatRoomMemberInfo)
}

inline void ChatRoomMemberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.userwxid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.displayname_){}
    , decltype(_impl_.bigheadimgurl_){}
    , decltype(_impl_.smallheadimgurl_){}
    , decltype(_impl_.inviteuserwxid_){}
    , decltype(_impl_.ischatroomnumber_){0}
    , decltype(_impl_.field_8_){0}
    , decltype(_impl_.field_16_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.userwxid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.userwxid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.displayname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.displayname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bigheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smallheadimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inviteuserwxid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inviteuserwxid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatRoomMemberInfo::~ChatRoomMemberInfo() {
  // @@protoc_insertion_point(destructor:ChatRoomMemberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatRoomMemberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.userwxid_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.displayname_.Destroy();
  _impl_.bigheadimgurl_.Destroy();
  _impl_.smallheadimgurl_.Destroy();
  _impl_.inviteuserwxid_.Destroy();
}

void ChatRoomMemberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatRoomMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatRoomMemberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.userwxid_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.displayname_.ClearToEmpty();
  _impl_.bigheadimgurl_.ClearToEmpty();
  _impl_.smallheadimgurl_.ClearToEmpty();
  _impl_.inviteuserwxid_.ClearToEmpty();
  ::memset(&_impl_.ischatroomnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.field_16_) -
      reinterpret_cast<char*>(&_impl_.ischatroomnumber_)) + sizeof(_impl_.field_16_));
  _internal_metadata_.Clear<std::string>();
}

const char* ChatRoomMemberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string UserWxid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_userwxid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string NickName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string DisplayName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_displayname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string BigHeadImgUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bigheadimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string SmallHeadImgUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_smallheadimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 isChatRoomNumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ischatroomnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string inviteUserWxid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_inviteuserwxid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int32 field_8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.field_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 field_16 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.field_16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatRoomMemberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatRoomMemberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserWxid = 1;
  if (!this->_internal_userwxid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userwxid().data(), static_cast<int>(this->_internal_userwxid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatRoomMemberInfo.UserWxid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userwxid(), target);
  }

  // string NickName = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatRoomMemberInfo.NickName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string DisplayName = 3;
  if (!this->_internal_displayname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_displayname().data(), static_cast<int>(this->_internal_displayname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatRoomMemberInfo.DisplayName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_displayname(), target);
  }

  // string BigHeadImgUrl = 4;
  if (!this->_internal_bigheadimgurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bigheadimgurl().data(), static_cast<int>(this->_internal_bigheadimgurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatRoomMemberInfo.BigHeadImgUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bigheadimgurl(), target);
  }

  // string SmallHeadImgUrl = 5;
  if (!this->_internal_smallheadimgurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smallheadimgurl().data(), static_cast<int>(this->_internal_smallheadimgurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatRoomMemberInfo.SmallHeadImgUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_smallheadimgurl(), target);
  }

  // int32 isChatRoomNumber = 6;
  if (this->_internal_ischatroomnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_ischatroomnumber(), target);
  }

  // string inviteUserWxid = 7;
  if (!this->_internal_inviteuserwxid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inviteuserwxid().data(), static_cast<int>(this->_internal_inviteuserwxid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChatRoomMemberInfo.inviteUserWxid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_inviteuserwxid(), target);
  }

  // int32 field_8 = 8;
  if (this->_internal_field_8() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_field_8(), target);
  }

  // int32 field_16 = 16;
  if (this->_internal_field_16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_field_16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatRoomMemberInfo)
  return target;
}

size_t ChatRoomMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatRoomMemberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UserWxid = 1;
  if (!this->_internal_userwxid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userwxid());
  }

  // string NickName = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string DisplayName = 3;
  if (!this->_internal_displayname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_displayname());
  }

  // string BigHeadImgUrl = 4;
  if (!this->_internal_bigheadimgurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bigheadimgurl());
  }

  // string SmallHeadImgUrl = 5;
  if (!this->_internal_smallheadimgurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smallheadimgurl());
  }

  // string inviteUserWxid = 7;
  if (!this->_internal_inviteuserwxid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviteuserwxid());
  }

  // int32 isChatRoomNumber = 6;
  if (this->_internal_ischatroomnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ischatroomnumber());
  }

  // int32 field_8 = 8;
  if (this->_internal_field_8() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_8());
  }

  // int32 field_16 = 16;
  if (this->_internal_field_16() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_field_16());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatRoomMemberInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChatRoomMemberInfo*>(
      &from));
}

void ChatRoomMemberInfo::MergeFrom(const ChatRoomMemberInfo& from) {
  ChatRoomMemberInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ChatRoomMemberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_userwxid().empty()) {
    _this->_internal_set_userwxid(from._internal_userwxid());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_displayname().empty()) {
    _this->_internal_set_displayname(from._internal_displayname());
  }
  if (!from._internal_bigheadimgurl().empty()) {
    _this->_internal_set_bigheadimgurl(from._internal_bigheadimgurl());
  }
  if (!from._internal_smallheadimgurl().empty()) {
    _this->_internal_set_smallheadimgurl(from._internal_smallheadimgurl());
  }
  if (!from._internal_inviteuserwxid().empty()) {
    _this->_internal_set_inviteuserwxid(from._internal_inviteuserwxid());
  }
  if (from._internal_ischatroomnumber() != 0) {
    _this->_internal_set_ischatroomnumber(from._internal_ischatroomnumber());
  }
  if (from._internal_field_8() != 0) {
    _this->_internal_set_field_8(from._internal_field_8());
  }
  if (from._internal_field_16() != 0) {
    _this->_internal_set_field_16(from._internal_field_16());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChatRoomMemberInfo::CopyFrom(const ChatRoomMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatRoomMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMemberInfo::IsInitialized() const {
  return true;
}

void ChatRoomMemberInfo::InternalSwap(ChatRoomMemberInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.userwxid_, lhs_arena,
      &other->_impl_.userwxid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.displayname_, lhs_arena,
      &other->_impl_.displayname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bigheadimgurl_, lhs_arena,
      &other->_impl_.bigheadimgurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.smallheadimgurl_, lhs_arena,
      &other->_impl_.smallheadimgurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inviteuserwxid_, lhs_arena,
      &other->_impl_.inviteuserwxid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatRoomMemberInfo, _impl_.field_16_)
      + sizeof(ChatRoomMemberInfo::_impl_.field_16_)
      - PROTOBUF_FIELD_OFFSET(ChatRoomMemberInfo, _impl_.ischatroomnumber_)>(
          reinterpret_cast<char*>(&_impl_.ischatroomnumber_),
          reinterpret_cast<char*>(&other->_impl_.ischatroomnumber_));
}

std::string ChatRoomMemberInfo::GetTypeName() const {
  return "ChatRoomMemberInfo";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChatRoomMemberInfo*
Arena::CreateMaybeMessage< ::ChatRoomMemberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatRoomMemberInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
