// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GetChatroomMemberDetailResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GetChatroomMemberDetailResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GetChatroomMemberDetailResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "BaseResponse.pb.h"
#include "ChatRoomMemberData.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GetChatroomMemberDetailResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GetChatroomMemberDetailResponse_2eproto {
  static const uint32_t offsets[];
};
class GetChatroomMemberDetailResponse;
struct GetChatroomMemberDetailResponseDefaultTypeInternal;
extern GetChatroomMemberDetailResponseDefaultTypeInternal _GetChatroomMemberDetailResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetChatroomMemberDetailResponse* Arena::CreateMaybeMessage<::GetChatroomMemberDetailResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GetChatroomMemberDetailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:GetChatroomMemberDetailResponse) */ {
 public:
  inline GetChatroomMemberDetailResponse() : GetChatroomMemberDetailResponse(nullptr) {}
  ~GetChatroomMemberDetailResponse() override;
  explicit PROTOBUF_CONSTEXPR GetChatroomMemberDetailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChatroomMemberDetailResponse(const GetChatroomMemberDetailResponse& from);
  GetChatroomMemberDetailResponse(GetChatroomMemberDetailResponse&& from) noexcept
    : GetChatroomMemberDetailResponse() {
    *this = ::std::move(from);
  }

  inline GetChatroomMemberDetailResponse& operator=(const GetChatroomMemberDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChatroomMemberDetailResponse& operator=(GetChatroomMemberDetailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GetChatroomMemberDetailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChatroomMemberDetailResponse* internal_default_instance() {
    return reinterpret_cast<const GetChatroomMemberDetailResponse*>(
               &_GetChatroomMemberDetailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetChatroomMemberDetailResponse& a, GetChatroomMemberDetailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChatroomMemberDetailResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChatroomMemberDetailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChatroomMemberDetailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChatroomMemberDetailResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetChatroomMemberDetailResponse& from);
  void MergeFrom(const GetChatroomMemberDetailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetChatroomMemberDetailResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetChatroomMemberDetailResponse";
  }
  protected:
  explicit GetChatroomMemberDetailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomIDFieldNumber = 2,
    kBaseResponseFieldNumber = 1,
    kChatroomDataFieldNumber = 4,
    kServerVersionFieldNumber = 3,
  };
  // string chatroomID = 2;
  void clear_chatroomid();
  const std::string& chatroomid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroomid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroomid();
  PROTOBUF_NODISCARD std::string* release_chatroomid();
  void set_allocated_chatroomid(std::string* chatroomid);
  private:
  const std::string& _internal_chatroomid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroomid(const std::string& value);
  std::string* _internal_mutable_chatroomid();
  public:

  // .BaseResponse baseResponse = 1;
  bool has_baseresponse() const;
  private:
  bool _internal_has_baseresponse() const;
  public:
  void clear_baseresponse();
  const ::BaseResponse& baseresponse() const;
  PROTOBUF_NODISCARD ::BaseResponse* release_baseresponse();
  ::BaseResponse* mutable_baseresponse();
  void set_allocated_baseresponse(::BaseResponse* baseresponse);
  private:
  const ::BaseResponse& _internal_baseresponse() const;
  ::BaseResponse* _internal_mutable_baseresponse();
  public:
  void unsafe_arena_set_allocated_baseresponse(
      ::BaseResponse* baseresponse);
  ::BaseResponse* unsafe_arena_release_baseresponse();

  // .ChatRoomMemberData chatroomData = 4;
  bool has_chatroomdata() const;
  private:
  bool _internal_has_chatroomdata() const;
  public:
  void clear_chatroomdata();
  const ::ChatRoomMemberData& chatroomdata() const;
  PROTOBUF_NODISCARD ::ChatRoomMemberData* release_chatroomdata();
  ::ChatRoomMemberData* mutable_chatroomdata();
  void set_allocated_chatroomdata(::ChatRoomMemberData* chatroomdata);
  private:
  const ::ChatRoomMemberData& _internal_chatroomdata() const;
  ::ChatRoomMemberData* _internal_mutable_chatroomdata();
  public:
  void unsafe_arena_set_allocated_chatroomdata(
      ::ChatRoomMemberData* chatroomdata);
  ::ChatRoomMemberData* unsafe_arena_release_chatroomdata();

  // int32 serverVersion = 3;
  void clear_serverversion();
  int32_t serverversion() const;
  void set_serverversion(int32_t value);
  private:
  int32_t _internal_serverversion() const;
  void _internal_set_serverversion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetChatroomMemberDetailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroomid_;
    ::BaseResponse* baseresponse_;
    ::ChatRoomMemberData* chatroomdata_;
    int32_t serverversion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GetChatroomMemberDetailResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetChatroomMemberDetailResponse

// .BaseResponse baseResponse = 1;
inline bool GetChatroomMemberDetailResponse::_internal_has_baseresponse() const {
  return this != internal_default_instance() && _impl_.baseresponse_ != nullptr;
}
inline bool GetChatroomMemberDetailResponse::has_baseresponse() const {
  return _internal_has_baseresponse();
}
inline const ::BaseResponse& GetChatroomMemberDetailResponse::_internal_baseresponse() const {
  const ::BaseResponse* p = _impl_.baseresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::BaseResponse&>(
      ::_BaseResponse_default_instance_);
}
inline const ::BaseResponse& GetChatroomMemberDetailResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.baseResponse)
  return _internal_baseresponse();
}
inline void GetChatroomMemberDetailResponse::unsafe_arena_set_allocated_baseresponse(
    ::BaseResponse* baseresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseresponse_);
  }
  _impl_.baseresponse_ = baseresponse;
  if (baseresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetChatroomMemberDetailResponse.baseResponse)
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::release_baseresponse() {
  
  ::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::unsafe_arena_release_baseresponse() {
  // @@protoc_insertion_point(field_release:GetChatroomMemberDetailResponse.baseResponse)
  
  ::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
  return temp;
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::_internal_mutable_baseresponse() {
  
  if (_impl_.baseresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::BaseResponse>(GetArenaForAllocation());
    _impl_.baseresponse_ = p;
  }
  return _impl_.baseresponse_;
}
inline ::BaseResponse* GetChatroomMemberDetailResponse::mutable_baseresponse() {
  ::BaseResponse* _msg = _internal_mutable_baseresponse();
  // @@protoc_insertion_point(field_mutable:GetChatroomMemberDetailResponse.baseResponse)
  return _msg;
}
inline void GetChatroomMemberDetailResponse::set_allocated_baseresponse(::BaseResponse* baseresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseresponse_);
  }
  if (baseresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(baseresponse));
    if (message_arena != submessage_arena) {
      baseresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseresponse_ = baseresponse;
  // @@protoc_insertion_point(field_set_allocated:GetChatroomMemberDetailResponse.baseResponse)
}

// string chatroomID = 2;
inline void GetChatroomMemberDetailResponse::clear_chatroomid() {
  _impl_.chatroomid_.ClearToEmpty();
}
inline const std::string& GetChatroomMemberDetailResponse::chatroomid() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.chatroomID)
  return _internal_chatroomid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetChatroomMemberDetailResponse::set_chatroomid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chatroomid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetChatroomMemberDetailResponse.chatroomID)
}
inline std::string* GetChatroomMemberDetailResponse::mutable_chatroomid() {
  std::string* _s = _internal_mutable_chatroomid();
  // @@protoc_insertion_point(field_mutable:GetChatroomMemberDetailResponse.chatroomID)
  return _s;
}
inline const std::string& GetChatroomMemberDetailResponse::_internal_chatroomid() const {
  return _impl_.chatroomid_.Get();
}
inline void GetChatroomMemberDetailResponse::_internal_set_chatroomid(const std::string& value) {
  
  _impl_.chatroomid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetChatroomMemberDetailResponse::_internal_mutable_chatroomid() {
  
  return _impl_.chatroomid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetChatroomMemberDetailResponse::release_chatroomid() {
  // @@protoc_insertion_point(field_release:GetChatroomMemberDetailResponse.chatroomID)
  return _impl_.chatroomid_.Release();
}
inline void GetChatroomMemberDetailResponse::set_allocated_chatroomid(std::string* chatroomid) {
  if (chatroomid != nullptr) {
    
  } else {
    
  }
  _impl_.chatroomid_.SetAllocated(chatroomid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chatroomid_.IsDefault()) {
    _impl_.chatroomid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetChatroomMemberDetailResponse.chatroomID)
}

// int32 serverVersion = 3;
inline void GetChatroomMemberDetailResponse::clear_serverversion() {
  _impl_.serverversion_ = 0;
}
inline int32_t GetChatroomMemberDetailResponse::_internal_serverversion() const {
  return _impl_.serverversion_;
}
inline int32_t GetChatroomMemberDetailResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.serverVersion)
  return _internal_serverversion();
}
inline void GetChatroomMemberDetailResponse::_internal_set_serverversion(int32_t value) {
  
  _impl_.serverversion_ = value;
}
inline void GetChatroomMemberDetailResponse::set_serverversion(int32_t value) {
  _internal_set_serverversion(value);
  // @@protoc_insertion_point(field_set:GetChatroomMemberDetailResponse.serverVersion)
}

// .ChatRoomMemberData chatroomData = 4;
inline bool GetChatroomMemberDetailResponse::_internal_has_chatroomdata() const {
  return this != internal_default_instance() && _impl_.chatroomdata_ != nullptr;
}
inline bool GetChatroomMemberDetailResponse::has_chatroomdata() const {
  return _internal_has_chatroomdata();
}
inline const ::ChatRoomMemberData& GetChatroomMemberDetailResponse::_internal_chatroomdata() const {
  const ::ChatRoomMemberData* p = _impl_.chatroomdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::ChatRoomMemberData&>(
      ::_ChatRoomMemberData_default_instance_);
}
inline const ::ChatRoomMemberData& GetChatroomMemberDetailResponse::chatroomdata() const {
  // @@protoc_insertion_point(field_get:GetChatroomMemberDetailResponse.chatroomData)
  return _internal_chatroomdata();
}
inline void GetChatroomMemberDetailResponse::unsafe_arena_set_allocated_chatroomdata(
    ::ChatRoomMemberData* chatroomdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatroomdata_);
  }
  _impl_.chatroomdata_ = chatroomdata;
  if (chatroomdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GetChatroomMemberDetailResponse.chatroomData)
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::release_chatroomdata() {
  
  ::ChatRoomMemberData* temp = _impl_.chatroomdata_;
  _impl_.chatroomdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::unsafe_arena_release_chatroomdata() {
  // @@protoc_insertion_point(field_release:GetChatroomMemberDetailResponse.chatroomData)
  
  ::ChatRoomMemberData* temp = _impl_.chatroomdata_;
  _impl_.chatroomdata_ = nullptr;
  return temp;
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::_internal_mutable_chatroomdata() {
  
  if (_impl_.chatroomdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::ChatRoomMemberData>(GetArenaForAllocation());
    _impl_.chatroomdata_ = p;
  }
  return _impl_.chatroomdata_;
}
inline ::ChatRoomMemberData* GetChatroomMemberDetailResponse::mutable_chatroomdata() {
  ::ChatRoomMemberData* _msg = _internal_mutable_chatroomdata();
  // @@protoc_insertion_point(field_mutable:GetChatroomMemberDetailResponse.chatroomData)
  return _msg;
}
inline void GetChatroomMemberDetailResponse::set_allocated_chatroomdata(::ChatRoomMemberData* chatroomdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatroomdata_);
  }
  if (chatroomdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatroomdata));
    if (message_arena != submessage_arena) {
      chatroomdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatroomdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chatroomdata_ = chatroomdata;
  // @@protoc_insertion_point(field_set_allocated:GetChatroomMemberDetailResponse.chatroomData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GetChatroomMemberDetailResponse_2eproto
