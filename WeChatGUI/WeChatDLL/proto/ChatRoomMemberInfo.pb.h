// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatRoomMemberInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatRoomMemberInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ChatRoomMemberInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ChatRoomMemberInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatRoomMemberInfo_2eproto {
  static const uint32_t offsets[];
};
class ChatRoomMemberInfo;
struct ChatRoomMemberInfoDefaultTypeInternal;
extern ChatRoomMemberInfoDefaultTypeInternal _ChatRoomMemberInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChatRoomMemberInfo* Arena::CreateMaybeMessage<::ChatRoomMemberInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChatRoomMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ChatRoomMemberInfo) */ {
 public:
  inline ChatRoomMemberInfo() : ChatRoomMemberInfo(nullptr) {}
  ~ChatRoomMemberInfo() override;
  explicit PROTOBUF_CONSTEXPR ChatRoomMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChatRoomMemberInfo(const ChatRoomMemberInfo& from);
  ChatRoomMemberInfo(ChatRoomMemberInfo&& from) noexcept
    : ChatRoomMemberInfo() {
    *this = ::std::move(from);
  }

  inline ChatRoomMemberInfo& operator=(const ChatRoomMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatRoomMemberInfo& operator=(ChatRoomMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ChatRoomMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatRoomMemberInfo* internal_default_instance() {
    return reinterpret_cast<const ChatRoomMemberInfo*>(
               &_ChatRoomMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatRoomMemberInfo& a, ChatRoomMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatRoomMemberInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatRoomMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatRoomMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChatRoomMemberInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChatRoomMemberInfo& from);
  void MergeFrom(const ChatRoomMemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatRoomMemberInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChatRoomMemberInfo";
  }
  protected:
  explicit ChatRoomMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserWxidFieldNumber = 1,
    kNickNameFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kBigHeadImgUrlFieldNumber = 4,
    kSmallHeadImgUrlFieldNumber = 5,
    kInviteUserWxidFieldNumber = 7,
    kIsChatRoomNumberFieldNumber = 6,
    kField8FieldNumber = 8,
    kField16FieldNumber = 16,
  };
  // string UserWxid = 1;
  void clear_userwxid();
  const std::string& userwxid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userwxid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userwxid();
  PROTOBUF_NODISCARD std::string* release_userwxid();
  void set_allocated_userwxid(std::string* userwxid);
  private:
  const std::string& _internal_userwxid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userwxid(const std::string& value);
  std::string* _internal_mutable_userwxid();
  public:

  // string NickName = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string DisplayName = 3;
  void clear_displayname();
  const std::string& displayname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_displayname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_displayname();
  PROTOBUF_NODISCARD std::string* release_displayname();
  void set_allocated_displayname(std::string* displayname);
  private:
  const std::string& _internal_displayname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_displayname(const std::string& value);
  std::string* _internal_mutable_displayname();
  public:

  // string BigHeadImgUrl = 4;
  void clear_bigheadimgurl();
  const std::string& bigheadimgurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bigheadimgurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bigheadimgurl();
  PROTOBUF_NODISCARD std::string* release_bigheadimgurl();
  void set_allocated_bigheadimgurl(std::string* bigheadimgurl);
  private:
  const std::string& _internal_bigheadimgurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bigheadimgurl(const std::string& value);
  std::string* _internal_mutable_bigheadimgurl();
  public:

  // string SmallHeadImgUrl = 5;
  void clear_smallheadimgurl();
  const std::string& smallheadimgurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smallheadimgurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smallheadimgurl();
  PROTOBUF_NODISCARD std::string* release_smallheadimgurl();
  void set_allocated_smallheadimgurl(std::string* smallheadimgurl);
  private:
  const std::string& _internal_smallheadimgurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smallheadimgurl(const std::string& value);
  std::string* _internal_mutable_smallheadimgurl();
  public:

  // string inviteUserWxid = 7;
  void clear_inviteuserwxid();
  const std::string& inviteuserwxid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_inviteuserwxid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_inviteuserwxid();
  PROTOBUF_NODISCARD std::string* release_inviteuserwxid();
  void set_allocated_inviteuserwxid(std::string* inviteuserwxid);
  private:
  const std::string& _internal_inviteuserwxid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inviteuserwxid(const std::string& value);
  std::string* _internal_mutable_inviteuserwxid();
  public:

  // int32 isChatRoomNumber = 6;
  void clear_ischatroomnumber();
  int32_t ischatroomnumber() const;
  void set_ischatroomnumber(int32_t value);
  private:
  int32_t _internal_ischatroomnumber() const;
  void _internal_set_ischatroomnumber(int32_t value);
  public:

  // int32 field_8 = 8;
  void clear_field_8();
  int32_t field_8() const;
  void set_field_8(int32_t value);
  private:
  int32_t _internal_field_8() const;
  void _internal_set_field_8(int32_t value);
  public:

  // int32 field_16 = 16;
  void clear_field_16();
  int32_t field_16() const;
  void set_field_16(int32_t value);
  private:
  int32_t _internal_field_16() const;
  void _internal_set_field_16(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ChatRoomMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userwxid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bigheadimgurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smallheadimgurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteuserwxid_;
    int32_t ischatroomnumber_;
    int32_t field_8_;
    int32_t field_16_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatRoomMemberInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatRoomMemberInfo

// string UserWxid = 1;
inline void ChatRoomMemberInfo::clear_userwxid() {
  _impl_.userwxid_.ClearToEmpty();
}
inline const std::string& ChatRoomMemberInfo::userwxid() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.UserWxid)
  return _internal_userwxid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_userwxid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.userwxid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.UserWxid)
}
inline std::string* ChatRoomMemberInfo::mutable_userwxid() {
  std::string* _s = _internal_mutable_userwxid();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.UserWxid)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_userwxid() const {
  return _impl_.userwxid_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_userwxid(const std::string& value) {
  
  _impl_.userwxid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_userwxid() {
  
  return _impl_.userwxid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_userwxid() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.UserWxid)
  return _impl_.userwxid_.Release();
}
inline void ChatRoomMemberInfo::set_allocated_userwxid(std::string* userwxid) {
  if (userwxid != nullptr) {
    
  } else {
    
  }
  _impl_.userwxid_.SetAllocated(userwxid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.userwxid_.IsDefault()) {
    _impl_.userwxid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.UserWxid)
}

// string NickName = 2;
inline void ChatRoomMemberInfo::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& ChatRoomMemberInfo::nickname() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.NickName)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.NickName)
}
inline std::string* ChatRoomMemberInfo::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.NickName)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.NickName)
  return _impl_.nickname_.Release();
}
inline void ChatRoomMemberInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.NickName)
}

// string DisplayName = 3;
inline void ChatRoomMemberInfo::clear_displayname() {
  _impl_.displayname_.ClearToEmpty();
}
inline const std::string& ChatRoomMemberInfo::displayname() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.DisplayName)
  return _internal_displayname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_displayname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.displayname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.DisplayName)
}
inline std::string* ChatRoomMemberInfo::mutable_displayname() {
  std::string* _s = _internal_mutable_displayname();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.DisplayName)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_displayname() const {
  return _impl_.displayname_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_displayname(const std::string& value) {
  
  _impl_.displayname_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_displayname() {
  
  return _impl_.displayname_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_displayname() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.DisplayName)
  return _impl_.displayname_.Release();
}
inline void ChatRoomMemberInfo::set_allocated_displayname(std::string* displayname) {
  if (displayname != nullptr) {
    
  } else {
    
  }
  _impl_.displayname_.SetAllocated(displayname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.displayname_.IsDefault()) {
    _impl_.displayname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.DisplayName)
}

// string BigHeadImgUrl = 4;
inline void ChatRoomMemberInfo::clear_bigheadimgurl() {
  _impl_.bigheadimgurl_.ClearToEmpty();
}
inline const std::string& ChatRoomMemberInfo::bigheadimgurl() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.BigHeadImgUrl)
  return _internal_bigheadimgurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_bigheadimgurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bigheadimgurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.BigHeadImgUrl)
}
inline std::string* ChatRoomMemberInfo::mutable_bigheadimgurl() {
  std::string* _s = _internal_mutable_bigheadimgurl();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.BigHeadImgUrl)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_bigheadimgurl() const {
  return _impl_.bigheadimgurl_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_bigheadimgurl(const std::string& value) {
  
  _impl_.bigheadimgurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_bigheadimgurl() {
  
  return _impl_.bigheadimgurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_bigheadimgurl() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.BigHeadImgUrl)
  return _impl_.bigheadimgurl_.Release();
}
inline void ChatRoomMemberInfo::set_allocated_bigheadimgurl(std::string* bigheadimgurl) {
  if (bigheadimgurl != nullptr) {
    
  } else {
    
  }
  _impl_.bigheadimgurl_.SetAllocated(bigheadimgurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bigheadimgurl_.IsDefault()) {
    _impl_.bigheadimgurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.BigHeadImgUrl)
}

// string SmallHeadImgUrl = 5;
inline void ChatRoomMemberInfo::clear_smallheadimgurl() {
  _impl_.smallheadimgurl_.ClearToEmpty();
}
inline const std::string& ChatRoomMemberInfo::smallheadimgurl() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.SmallHeadImgUrl)
  return _internal_smallheadimgurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_smallheadimgurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.smallheadimgurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.SmallHeadImgUrl)
}
inline std::string* ChatRoomMemberInfo::mutable_smallheadimgurl() {
  std::string* _s = _internal_mutable_smallheadimgurl();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.SmallHeadImgUrl)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_smallheadimgurl() const {
  return _impl_.smallheadimgurl_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_smallheadimgurl(const std::string& value) {
  
  _impl_.smallheadimgurl_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_smallheadimgurl() {
  
  return _impl_.smallheadimgurl_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_smallheadimgurl() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.SmallHeadImgUrl)
  return _impl_.smallheadimgurl_.Release();
}
inline void ChatRoomMemberInfo::set_allocated_smallheadimgurl(std::string* smallheadimgurl) {
  if (smallheadimgurl != nullptr) {
    
  } else {
    
  }
  _impl_.smallheadimgurl_.SetAllocated(smallheadimgurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.smallheadimgurl_.IsDefault()) {
    _impl_.smallheadimgurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.SmallHeadImgUrl)
}

// int32 isChatRoomNumber = 6;
inline void ChatRoomMemberInfo::clear_ischatroomnumber() {
  _impl_.ischatroomnumber_ = 0;
}
inline int32_t ChatRoomMemberInfo::_internal_ischatroomnumber() const {
  return _impl_.ischatroomnumber_;
}
inline int32_t ChatRoomMemberInfo::ischatroomnumber() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.isChatRoomNumber)
  return _internal_ischatroomnumber();
}
inline void ChatRoomMemberInfo::_internal_set_ischatroomnumber(int32_t value) {
  
  _impl_.ischatroomnumber_ = value;
}
inline void ChatRoomMemberInfo::set_ischatroomnumber(int32_t value) {
  _internal_set_ischatroomnumber(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.isChatRoomNumber)
}

// string inviteUserWxid = 7;
inline void ChatRoomMemberInfo::clear_inviteuserwxid() {
  _impl_.inviteuserwxid_.ClearToEmpty();
}
inline const std::string& ChatRoomMemberInfo::inviteuserwxid() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.inviteUserWxid)
  return _internal_inviteuserwxid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChatRoomMemberInfo::set_inviteuserwxid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.inviteuserwxid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.inviteUserWxid)
}
inline std::string* ChatRoomMemberInfo::mutable_inviteuserwxid() {
  std::string* _s = _internal_mutable_inviteuserwxid();
  // @@protoc_insertion_point(field_mutable:ChatRoomMemberInfo.inviteUserWxid)
  return _s;
}
inline const std::string& ChatRoomMemberInfo::_internal_inviteuserwxid() const {
  return _impl_.inviteuserwxid_.Get();
}
inline void ChatRoomMemberInfo::_internal_set_inviteuserwxid(const std::string& value) {
  
  _impl_.inviteuserwxid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::_internal_mutable_inviteuserwxid() {
  
  return _impl_.inviteuserwxid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChatRoomMemberInfo::release_inviteuserwxid() {
  // @@protoc_insertion_point(field_release:ChatRoomMemberInfo.inviteUserWxid)
  return _impl_.inviteuserwxid_.Release();
}
inline void ChatRoomMemberInfo::set_allocated_inviteuserwxid(std::string* inviteuserwxid) {
  if (inviteuserwxid != nullptr) {
    
  } else {
    
  }
  _impl_.inviteuserwxid_.SetAllocated(inviteuserwxid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.inviteuserwxid_.IsDefault()) {
    _impl_.inviteuserwxid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ChatRoomMemberInfo.inviteUserWxid)
}

// int32 field_8 = 8;
inline void ChatRoomMemberInfo::clear_field_8() {
  _impl_.field_8_ = 0;
}
inline int32_t ChatRoomMemberInfo::_internal_field_8() const {
  return _impl_.field_8_;
}
inline int32_t ChatRoomMemberInfo::field_8() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.field_8)
  return _internal_field_8();
}
inline void ChatRoomMemberInfo::_internal_set_field_8(int32_t value) {
  
  _impl_.field_8_ = value;
}
inline void ChatRoomMemberInfo::set_field_8(int32_t value) {
  _internal_set_field_8(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.field_8)
}

// int32 field_16 = 16;
inline void ChatRoomMemberInfo::clear_field_16() {
  _impl_.field_16_ = 0;
}
inline int32_t ChatRoomMemberInfo::_internal_field_16() const {
  return _impl_.field_16_;
}
inline int32_t ChatRoomMemberInfo::field_16() const {
  // @@protoc_insertion_point(field_get:ChatRoomMemberInfo.field_16)
  return _internal_field_16();
}
inline void ChatRoomMemberInfo::_internal_set_field_16(int32_t value) {
  
  _impl_.field_16_ = value;
}
inline void ChatRoomMemberInfo::set_field_16(int32_t value) {
  _internal_set_field_16(value);
  // @@protoc_insertion_point(field_set:ChatRoomMemberInfo.field_16)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ChatRoomMemberInfo_2eproto
